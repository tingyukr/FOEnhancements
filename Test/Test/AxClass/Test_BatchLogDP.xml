<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Test_BatchLogDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
/// THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
/// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
/// We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object
/// code form of the Sample Code, provided that. You agree:
///    (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
///    (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
///    (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
///    This is data provider class for batch job logs report.
/// </summary>
[
SRSReportParameterAttribute(classStr(Test_BatchLogContract))
]
final class Test_BatchLogDP extends SRSReportDataProviderPreProcessTempDB
{
    Test_TmpBatchLog      gTmpBatchLog;
    Test_BatchLogContract gBatchLogContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpBatchLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>InventOnhandTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from <c>InventOnhandTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(Test_TmpBatchLog))
    ]
    public Test_TmpBatchLog getTmpBatchLog()
    {
        select  gTmpBatchLog;
        return  gTmpBatchLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInfologIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the temp table buffer from infolog container.
    /// </summary>
    /// <param name = "_infoContainer">Target infolog container.</param>
    /// <param name = "_targetInsertList">Record insert list for the temp buffer.</param>
    protected void addInfologIntoTmpTable(container _infoContainer, RecordInsertList _targetInsertList)
    {
        if (conLen(_infoContainer) >= 2)
        {
            gTmpBatchLog.clear();
            gTmpBatchLog.LineNum = 1;
            gTmpBatchLog.Level = conPeek(_infoContainer, 1);
            gTmpBatchLog.Info = conPeek(_infoContainer, 2);
            _targetInsertList.add(gTmpBatchLog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// The method should compute data and populate the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        BatchHistory lBatchHistory;

        gBatchLogContract = this.parmDataContract();
        InfologData data       = BatchJobHistory::showLog(gBatchLogContract.parmBatchJobHistoryRecID());
        int         countItems = conlen(data);
        RecordInsertList lTmpBatchLogRecordList = new RecordInsertList(tableNum(Test_TmpBatchLog), true, true, true, true, true, gTmpBatchLog);

        boolean addedLog = false;
        for(int i = 1; i <= countItems; i += 3)
        {
            if (conLen(conPeek(data, i+2)) == 0)
            {
                continue;
            }

            addedLog = true;

            container lLogForTask = conPeek(data, i + 2);

            for (int j = 1; j <= conLen(lLogForTask); j++)
            {
                this.addInfologIntoTmpTable(conPeek(lLogForTask, j), lTmpBatchLogRecordList);
            }

        }

        if (!addedLog)
        {
            this.addInfologIntoTmpTable([0, "@ApplicationFoundation:BatchTaskLogEmpty"], lTmpBatchLogRecordList);
        }

        lTmpBatchLogRecordList.insertDatabase();

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>